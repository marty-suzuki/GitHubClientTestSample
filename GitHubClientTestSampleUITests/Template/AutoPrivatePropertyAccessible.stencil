@testable import GitHubClientTestSample
import UIKit
import Foundation
import RxSwift

// MARK: - PrivatePropertyAccessible
protocol PrivatePropertyAccessible {
    associatedtype PrivatePropertiesCompatible
    var privateProperties: PrivateProperties<PrivatePropertiesCompatible> { get }
}

struct PrivateProperties<Base> {
    fileprivate let base: Base

    init(_ base: Base) {
        self.base = base
    }
}

extension PrivatePropertyAccessible where PrivatePropertiesCompatible == Self {
    var privateProperties: PrivateProperties<Self> {
        return PrivateProperties(self)
    }
}

extension PrivateProperties where Base: NSObject {
    func property<T>(forKey key: String) -> T {
        return Mirror(reflecting: base).children.first { $0.label == key }!.value as! T
    }
}

{% for type in types.implementing.AutoPrivatePropertyAccessible %}
// MARK: - {{ type.name }}
extension {{type.name}}: PrivatePropertyAccessible {}

extension PrivateProperties where Base == {{type.name}} {
    {% for variable in type.storedVariables where variable.readAccess == "private" or variable.readAccess == "fileprivate" %}
    {% if variable|!annotated:"ignoreProperty" %}
    var {{variable.name}}: {{variable.typeName}} {
        return property(forKey: "{{variable.name}}")
    }
    {% endif %}
    {% endfor %}
}
{% endfor %}
